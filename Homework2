#include<pthread.h>
#include<stdio.h>
#include<stdlib.h>
#define NUMBER_OF_THREADS 5
int total = 0;
int array[5000];
void *print_hello_world(void *tid)
{
	
	
	printf("Hello world.Greetings from thread %d \n",tid);
	int value = tid;
	int lowerbound = (value - 1) * 1000;
	int upperbound = (value * 1000) - 1;
	
	
	for (int i = lowerbound; i <= upperbound; i++)
	{
		total = total + array[i];
	}
		pthread_exit(NULL);	
}
int main(int argc, char *argv[])
{
	pthread_t threads[NUMBER_OF_THREADS];
	int status, i;
	for (int j = 0; j < 5000; j++)
	{
		array[j] = j;
	}

	for (int i = 1; i <= NUMBER_OF_THREADS; i++)
	{
		
	  printf("main here.creating thread%d \n ",i);
	  //printf("%t");
		status = pthread_create(&threads[i], NULL, print_hello_world,(void*)i);
		if (status != 0)
		{
			printf("Oops.pthread_create returned error code%d",status);
			return -1;
		}
		//printf("%d",array[i]);
	}
	
	printf("tis is total %d", total);
	return 0;
}





*************************************************************************************************************************************

#include<pthread.h>
#include<stdio.h>
#include<stdlib.h> 
#include <semaphore.h> 
#include <unistd.h> 

#define NUMBER_OF_THREADS 5
int total = 0;
int array[5000];

sem_t mutex;

void *print_hello_world(void *tid)
{


	printf("Hello world.Greetings from thread %d \n", tid);
	int value = tid;
	int lowerbound = (value - 1) * 1000;
	int upperbound = (value * 1000) - 1;


	for (int i = lowerbound; i <= upperbound; i++)
	{
		total = total + array[i];
	}
	pthread_exit(NULL);
}
int main(int argc, char *argv[])
{
	sem_init(&mutex, 0, 1);

	pthread_t threads[NUMBER_OF_THREADS];
	int status, i;
	for (int j = 0; j < 5000; j++)
	{
		array[j] = j;
	}

	for (int i = 1; i <= NUMBER_OF_THREADS; i++)
	{

		printf("main here.creating thread%d \n ", i);
		//printf("%t");
		status = pthread_create(&threads[i], NULL, print_hello_world, (void*)i);
		if (status != 0)
		{
			printf("Oops.pthread_create returned error code%d", status);
			return -1;
		}
		//printf("%d",array[i]);
	}

	printf("tis is total %d", total);
	sem_destroy(&mutex);
	return 0;
}


